-----------------------------------------
Race condition: (Yaris Kosullari)
		Olayların zamanlamasi veya sirasi kod parcasinin doğruluğunu etkilediğinde 
	Race Condition oluşur.
		Bir cihaz veya sistemin ayni anda 2 veya daha fazla islemi gerceklestirmeye
	calistigi anda olusan sorum. 2 thread ayni bellek konumunu hedeflediginde ve en az biri bir yazma
	islemi oldugunda bu islem "Data races" tarafindan yonetilir.
-----------------------------------------
Data races: (Veri Yarislari)(Is Parcacigi)
		Thread Analyzer, çok kanallı bir işlemin yürütülmesi sırasında meydana gelen veri yarışlarını algılar. 
		1-) Tek bir işlemdeki 2 veya daha fazla is parcacigi ayni anda ayni bellek konumuna
			erişir ve erisimlerinden en az biri yazmak icindir.
		Sample; Bir Data race(is parcacigi) degistirilebilir bir nesneye erisirken
	baska bir Data race(is parcacigi) ona yazarken bir Race condition(veri 
	yarisi) meydana gelir.
		Data races' ten kacinmanin tek yolu, is parcaciklari arasında paylaşılan tüm değişken
	verilere erisimi senkronize etmektir. Bu erisimi senkronize etmeye yarayan da 'mutex'lerdir.

-----------------------------------------!
--> Özeti -> Olayın zamanlaması/sirasi kodla cakisirsa -> Race Condition(Yaris Koşulları).
--> Özeti -> Thread mutable object(değiştirilebilir nesneye) erişirsen baska bir Thread ona yazarsa -> Data Race(Veri Yarislari).
-----------------------------------------!
EXC_BAD_ACCES error:
	Bozuk belleğe erişmeye calisan 
-----------------------------------------
pthread_exit(): Cagirildiginda islemini erken sonlandirmak icin acilan thread sonlandirilir.
pthread_join(): Cagirildiginda donus degerini(islemini) tamamen bitirmesini bekledikten sonra
	acilan thread sonlandirilir.
pthread_detach(): Thread'in kendisinden veya başka thread'dan çağrılabilir ve
	iş parçacığının "dönüş değerini" veya "bitmesini bekleme yeteneğini istemediğinizi" belirtir.
	Bu yararlıdır çünkü aksi takdirde, siz çağırana kadar pthread_join değer pthread_t geçerli
	kalır ve kaynakları tüketir - en azından, dönüş değerini depolamak ve olası bir değerini
	bağlamak için kaynaklar pthread_t. kullanıyorsanız pthread_detach, normalde onu yeni iş
	parçacığından veya yeni iş parçacığı oluşturulur oluşturmaz ( 'den hemen sonra pthread_create)
	oluşturan iş parçacığından çağırırsınız.


//////	NOTES	\\\\\
export MallocStackLogging=1 --> ./prog 3 yazinca 3 tane leaks vardi onları gösteriyor.c